PHP Namespace Guide (ржмрж╛ржВрж▓рж╛ + English)
==========================================

1. Namespace ржХрзА?
----------------
PHPтАСрж░ Namespace рж╣рж▓рзЛ ржПржХржЯрж┐ 'container' ржмрж╛ packageтАСtype mechanism, ржпрж╛ ржХрзНрж▓рж╛рж╕, ржлрж╛ржВрж╢ржи ржУ ржХржирж╕рзНржЯрзНржпрж╛ржирзНржЯтАСржПрж░ ржирж╛ржорзЗрж░ conflict ржжрзВрж░ ржХрж░рзЗред ржмржбрж╝ ржкрзНрж░ржЬрзЗржХрзНржЯрзЗ ржПржХржЗ ржирж╛ржорзЗ ржПржХрж╛ржзрж┐ржХ ржХрзНрж▓рж╛рж╕/ржлрж╛ржВрж╢ржи ржерж╛ржХрждрзЗ ржкрж╛рж░рзЗ; namespace рж╕рзЗржЗрж╕ржмржХрзЗ ржЖрж▓рж╛ржжрж╛ ржХрж░рзЗ рж░рж╛ржЦрзЗред

2. Basic Syntax
---------------
```php
<?php
namespace MyProject;

class User {
    public function getName() {
        return "Ashik";
    }
}
```
`namespace MyProject;` ржжрж┐рзЯрзЗ ржПржХржЯрж┐ ржирждрзБржи namespace ржШрзЛрж╖ржгрж╛ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред ржПрж░ ржнрзЗрждрж░рзЗрж░ рж╕ржм ржХрзНрж▓рж╛рж╕тАСржлрж╛ржВрж╢ржитАСржХржирж╕рзНржЯрзНржпрж╛ржирзНржЯ ржПржЦржи `MyProject` ржирж╛ржорзЗрж░ тАЬржкрзНржпрж╛ржХрзЗржЬрзЗтАЭ ржЖржЫрзЗред

3. Namespace ржЫрж╛ржбрж╝рж╛ ржХрзА рж╕ржорж╕рзНржпрж╛?
-----------------------------
```php
// file1.php
class Helper { /* ... */ }

// file2.php
class Helper { /* ... */ }

// main.php (include both)
Fatal error: Cannot redeclare class Helper
```
ржПржХржЗ ржирж╛ржорзЗрж░ ржжрзБтАЩржЯрж┐ ржХрзНрж▓рж╛рж╕ PHP рж╕рж╣рзНржп ржХрж░рзЗ ржирж╛ тЖТ redeclare errorред

4. Namespace ржжрж┐рзЯрзЗ рж╕ржорж╛ржзрж╛ржи
------------------------
```php
// file1.php
namespace Project1;
class Helper { /* ... */ }

// file2.php
namespace Project2;
class Helper { /* ... */ }
```
```php
require 'file1.php';
require 'file2.php';

$h1 = new \Project1\Helper(); // тАЬ\тАЭ = global ржерзЗржХрзЗ рж╢рзБрж░рзБ
$h2 = new \Project2\Helper();
```

5. `use` ржУ Alias
----------------
```php
use Project1\Helper as P1Helper;
use Project2\Helper as P2Helper;

$p1 = new P1Helper();
$p2 = new P2Helper();
```
`use` keyword ржжрж┐ржпрж╝рзЗ рж▓ржорзНржмрж╛ fullyтАСqualified ржирж╛ржоржХрзЗ ржЫрзЛржЯ ржХрж░рзЗ ржЖржирж╛ ржпрж╛ржпрж╝; `as` ржжрж┐ржпрж╝рзЗ alias ржарж┐ржХ ржХрж░рж╛ ржпрж╛ржпрж╝ред

6. Global Namespace
-------------------
PHPтАСржПрж░ builtтАСin ржлрж╛ржВрж╢ржи/ржХрзНрж▓рж╛рж╕ рж╕ржм тАЬglobal namespaceтАЭтАСржП ржерж╛ржХрзЗред
```php
namespace MyApp;

function strlen($s){ return "custom"; }
echo strlen("abc");   // custom
echo \strlen("abc"); // 3  тЖТ global function
```
ржЙржжрж╛рж╣рж░ржгрзЗ `\strlen` ржжрж┐ржпрж╝рзЗ ржЖржорж░рж╛ рж╕рзНржкрж╖рзНржЯ ржХрж░рзЗржЫрж┐ ржпрзЗ builtтАСin version ржЪрж╛ржЗред

7. Autoloading (Composer)
-------------------------
`composer.json`:
```json
{
  "autoload": {
    "psr-4": {
      "App\\": "src/"
    }
  }
}
```
ржПрж░ржкрж░ `src/Controllers/HomeController.php`тАСржП:
```php
namespace App\Controllers;
class HomeController { /* ... */ }
```
ComposerтАСржПрж░ `dump-autoload` рж░рж╛ржи ржХрж░рж▓рзЗ `App\Controllers\HomeController` ржХрзНрж▓рж╛рж╕ ржЕржЯрзЛрж▓рзЛржб рж╣ржмрзЗред

8. Namespace vs Trait vs Class Folder
-------------------------------------
| Aspect              | Namespace                       | Trait                | Folder Structure            |
|---------------------|---------------------------------|----------------------|-----------------------------|
| рж▓ржХрзНрж╖рзНржп              | Name conflict рж╕ржорж╛ржзрж╛ржи            | Code reuse           | Files organise ржХрж░рж╛          |
| Multiple inheritance| N/A (structural)               | Supported via `use`  | N/A                         |
| Autoload рж╕рзБржмрж┐ржзрж╛     | рж╣рзНржпрж╛ржБ (PSR-4)                   | рж╣рзНржпрж╛ржБ, traitтАСржУ class | ржлрж╛ржЗрж▓┬аржкрже┬аmap ржХрж░рзЗ            |

9. Best Practices
-----------------
* **PSRтАС4** ржЕржирзБрж╕рж░ржг ржХрж░рзЗ namespace ржУ ржлрзЛрж▓рзНржбрж╛рж░ map ржХрж░рзБржиред
* ржкрзНрж░рждрж┐ржЯрж┐ package/ржоржбрж┐ржЙрж▓рзЗрж░ ржЬржирзНржп ржЖрж▓рж╛ржжрж╛ рж╢рзАрж░рзНрж╖ namespace ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи (e.g., `App\Services`, `Vendor\Logger`).
* ржлрж╛ржЗрж▓рзЗрж░ ржПржХржжржо ржкрзНрж░ржержо рж▓рж╛ржЗржирзЗ `namespace` ржШрзЛрж╖ржгрж╛ ржХрж░рзБржи, declareтАСржПрж░ ржЖржЧрзЗ ржХрзЛржирзЛ output/whitespace рж░рж╛ржЦржмрзЗржи ржирж╛ред

10. Quick Reference
-------------------
```php
namespace Foo\Bar;         // ржШрзЛрж╖ржгрж╛рзЯ backslash (\) ржжрж┐ржпрж╝рзЗ subтАСnamespace
use Foo\Bar\Baz;         // import
use Foo\Bar\Baz as Bz;   // alias
new \DateTime();          // global class
```

рж╕рж╛рж░рж╕ржВржХрзНрж╖рзЗржк
-----------
Namespace = **ржирж╛ржорж╕ржВржШрж░рзНрж╖рзЗрж░ ржкрзНрж░рждрж┐рж╖рзЗржзржХ**ред  
тАУ ржЫрж╛ржбрж╝рж╛ `Helper`, `Controller`, `Service` ржХрзНрж▓рж╛рж╕рзЗрж░ ржнрж┐ржбрж╝ рж╕рж╛ржорж▓рж╛рждрзЗ ржШрж╛ржо ржЭрж░ржмрзЗред  
тАУ Composer ржжрзНржмрж╛рж░рж╛ ржЕржЯрзЛрж▓рзЛржб ржХрж░рж▓рзЗ namespace structureтАСржЗ ржлрж╛ржЗрж▓тАСрж╕рзНржЯрзНрж░рж╛ржХржЪрж╛рж░рзЗрж░ map рждрзИрж░рж┐ ржХрж░рзЗред  

Happy coding! ЁЯЪА
